import xpt.StringOperations;

modeltype oocore uses 'http://www.eclipse.org/2008/oocore';
modeltype dnc uses 'http://www.eclipse.org/2008/dnc';
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

library dncUtil;

helper oocore::Package::isValid() : Boolean {
	return self.name <> null and self.name.length() > 0;
}

helper oocore::Package::fullyQualifiedName() : String {
	-- TODO: check for null
	--return p.package == null ? p.name : fullyQualifiedName(p.package) + '.' + p.name
	return self.name;
}

helper oocore::Classifier::fullyQualifiedName() : String {
--	return let p = fullyQualifiedName(self.package) :  p != '' null p != 'java.lang' ? p + '.' + self.name : self.name
	return self.name;
}

helper oocore::Class::fullyQualifiedName() : String {
--	return let p = fullyQualifiedName(self.package) :  p != '' null p != 'java.lang' ? p + '.' + self.name : self.name
	return self.name;
}

helper oocore::Class::fullyQualifiedPath() : String {
	return self.package.fullyQualifiedName().replace('\\.', '/') + '/' + self.name + '.java'
}

helper oocore::Reference::wrapIfCollection() : String { 
--	return self.upperBound = -1 ? 
--		"java.util.Collection" + "<" + fullyQualifiedName(self.type) + ">" :
--		fullyQualifiedName(self.type)
	return self.name
}

helper oocore::Parameter::wrapIfCollection() : String {
--	return param.upperBound = -1 ? 
--		'java.util.Collection' + '<' + fullyQualifiedName(param.type) + '>' :
--		fullyQualifiedName(param.type)
	return self.name
}

helper oocore::Operation::wrapIfCollection() : String {
--	return self.upperBound = -1 ? 
--		'java.util.Collection' + '<' + fullyQualifiedName(self.type) + '>' :
--		fullyQualifiedName(self.type)
	return self.name
}

helper String::asColumnNameChar() : String {
--	return self.toLower() = self ? self.toUpper() : '_' + self.toUpper()
	return self;
}

helper oocore::Classifier::isEntity() : Boolean {
	return false
}

helper oocore::Class::isEntity() : Boolean {
	return false
}

helper dnc::MomentInterval::isEntity() : Boolean {
	return true
}

helper dnc::MIDetail::isEntity() : Boolean {
	return true
}

helper dnc::Party::isEntity() : Boolean {
	return true
}

helper dnc::Place::isEntity() : Boolean {
	return true
}

helper dnc::Thing::isEntity() : Boolean {
	return true
}

helper dnc::Description::isEntity() : Boolean {
	return true
}

helper oocore::Reference::isAssociation() : Boolean {
	return false
}

helper dnc::Association::isAssociation() : Boolean {
	return true
}

-- Currently, we only create backward reference for ManyToOne relationships
helper oocore::Reference::generateReference() : Boolean {
	return self.type.isEntity() and self.opposite.isAssociation() and self.opposite.upperBound = -1
}

helper oocore::Package::gatherPackages() : List(oocore::Package) {
--	var p : List(oocore::Package) = {self};
--	return p.addAll(self.contents[oocore::Package].gatherPackages().flatten())
	return null
}

helper oocore::Package::gatherArchetypes() : List(dnc::Archetype) {
--	var p : List(oocore::Package) := self.gatherPackages();
--	return p.contents[dnc::Archetype]->select(e | e.isEntity())
	return null
}
