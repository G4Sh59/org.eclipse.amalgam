transformation scenario2testsuite(in scenarioModel : scenario, out testSuiteModel : Common_Testprofile::TPFTestSuite);

modeltype scenario uses 'http://www.eclipse.org/2008/scenario';
modeltype Common_Testprofile uses 'http://www.eclipse.org/hyades/models/common/testprofile.xmi';
modeltype Common_Configuration uses 'http://www.eclipse.org/hyades/models/common/configuration.xmi';
modeltype Common_Behavior_Fragments uses 'http://www.eclipse.org/hyades/models/common/behavior/fragments.xmi';
modeltype Common_Behavior_Interactions uses 'http://www.eclipse.org/hyades/models/common/behavior/interactions.xmi';

mapping main(in process : scenario::Process, out profile : Common_Testprofile::TPFTestSuite) {
	init {
		profile := process.map toTestSuite();
	}
}

mapping scenario::Process::toTestSuite() : Common_Testprofile::TPFTestSuite {
	init {
		var lifeline := object Common_Behavior_Interactions::BVRLifeline {
			name := '_selfLifeline';
		}
	}
	type := 'org.eclipse.hyades.test.manual.testSuite';
	persistenceId := 'HyadesFacadeResource';
	name := self.name;
	description := self.name;
	instances += object Common_Configuration::CFGInstance {
		classType := result;
		lifeline := lifeline;
	};
	behavior := object Common_Testprofile::TPFBehavior {
		name := result.name + '_behavior';
		resource := result.name + '.Test';
		interaction := object Common_Behavior_Fragments::BVRInteraction {
			lifelines += lifeline;
			interactionFragments += self.elements.selectGateways().map toInteractionFragment();
		}
	};
	testCases += self.elements.selectTasks().map toTestCase();
	end {
		result.testCases.setInstance(result);
	}
}

mapping scenario::Gateway::toInteractionFragment() : Common_Behavior_Fragments::BVRCombinedFragment 
	when {
		self.formsLoop(self)
	} {
	name := 'Iterate';
	interactionOperator := BVRInteractionOperator::loop;
	interactionOperands += object Common_Behavior_Fragments::BVRInteractionOperand {
		interactionFragments += self.collectLoopTasks().map toExecutionOccurrence();
		interactionConstraint := object Common_Behavior_Fragments::BVRInteractionConstraint {
			constraint := 'n';
		}
	}
}

mapping scenario::Task::toExecutionOccurrence() : Common_Behavior_Interactions::BVRExecutionOccurrence {
	name := self.name + ' - invocation';
	otherBehavior := self.late resolveone(Common_Testprofile::TPFBehavior);
}

query scenario::Element::formsLoop(target : scenario::Gateway) : Boolean {
	-- limit to Task elements for now
	var tasks : OrderedSet(scenario::Task) := self.outgoing.target.selectTasks()->asOrderedSet();
	var loop : Boolean := tasks.completesLoop(target)->includes(true);
	if not loop then {
		loop := tasks.formsLoop(target)->includes(true);
	} endif;
	return loop;
}

query scenario::Task::completesLoop(target : scenario::Gateway) : Boolean {
	return self.outgoing.target.selectGateways()->includes(target);
}

query scenario::Gateway::collectLoopTasks() : OrderedSet(scenario::Task) {
	var tasks : OrderedSet(scenario::Task) := self.outgoing.target.selectTasks()->asOrderedSet();
	var path : OrderedSet(scenario::Task) := null;
	var index : Integer := 1;
	while (path = null and index <= tasks->size()) {
		path := tasks->at(index).followPath(self);
		index := index + 1;
	};
	return path;
}

query scenario::Task::followPath(target : scenario::Gateway) : OrderedSet(scenario::Task) {
	var path : OrderedSet(scenario::Task) := null;
	if self.completesLoop(target) then {
		path += self->asSet();
	} else {
		var subTasks : OrderedSet(scenario::Task) := self.outgoing.target.selectTasks()->asOrderedSet();
		if subTasks->isEmpty() then {
			path := null;
		} else {
			path += self->asSet();
			path += subTasks.followPath(target);
		} endif;
	} endif;
	return path;
}

query Common_Testprofile::TPFTestCase::setInstance(inout suite : Common_Testprofile::TPFTestSuite) {
	suite.instances += object Common_Configuration::CFGInstance {
		classType := suite;
		lifeline := self.behavior.interaction.lifelines->asSequence()->last();
	};
}

mapping scenario::Task::toTestCase() : Common_Testprofile::TPFTestCase
{
	name := self.name;
	description := self.documentation;
	type := 'org.eclipse.hyades.test.manual.testCase';
	behavior := self.map toBehavior();
}

mapping scenario::Task::toBehavior() : Common_Testprofile::TPFBehavior {
	name := self.name + '_behavior';
	interaction := object Common_Behavior_Fragments::BVRInteraction {
		lifelines += object Common_Behavior_Interactions::BVRLifeline {
			name := '_selfLifeline';
		}
	}
}

query scenario::Element::selectGateways() : OrderedSet(scenario::Gateway) {
	return self->select(oclIsTypeOf(scenario::Gateway))->collect(oclAsType(scenario::Gateway))->asOrderedSet();
}

query scenario::Element::selectTasks() : OrderedSet(scenario::Task) {
	return self->select(oclIsTypeOf(scenario::Task))->collect(oclAsType(scenario::Task))->asOrderedSet();
}