«IMPORT 'http://www.eclipse.org/amalgam/2008/build'»
«IMPORT 'http://www.eclipse.org/amalgam/2008/product'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»

«EXTENSION util»

«DEFINE Main FOR build::Build-»
###############################################################################
# Copyright (c) 2008 Borland Software Corporation
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     Borland - initial API and implementation
###############################################################################
#
# NOTE: This is a generated properties file
#
###############################################################################
«EXPAND packagingProperties FOR self»
«EXPAND buildNamingProperties FOR self»
«EXPAND baseProperties FOR self»
«EXPAND mapProperties FOR self»
«EXPAND repoProperties FOR self»
«EXPAND compilerOptions FOR self»
«EXPAND additions FOR self»
«ENDDEFINE»

«DEFINE packagingProperties FOR build::Build»
# Parameters describing how and where to execute the build.
# Typical users need only update the following properties:
#    baseLocation - where things you are building against are installed
#    bootclasspath - The base jars to compile against (typicaly rt.jar)
#    configs - the list of {os, ws, arch} configurations to build.  
#
# Of course any of the settings here can be overridden by spec'ing 
# them on the command line (e.g., -DbaseLocation=d:/eclipse

#The type of the top level element we are building, generally "feature"
topLevelElementType = product
#The id of the top level element we are building
topLevelElementId = «product.id»

############# PRODUCT/PACKAGING CONTROL #############
product=${buildDirectory}/«product.launcher.name».product
runPackager=true

generate.p2.metadata=true
p2.metadata.repo=file://${buildDirectory}/${buildLabel}/repo
p2.artifact.repo=file://${buildDirectory}/${buildLabel}/repo
p2.metadata.repo.name=«product.name» Metadata Repository
p2.artifact.repo.name=«product.name» Artifact Repository
p2.profile=«product.launcher.name»Profile
p2.flavor=tooling
p2.IU=«product.id»
p2.publish.artifacts=true
       
# The prefix that will be used in the generated archive.
archivePrefix=«product.launcher.name»

#Set the name of the archive that will result from the product build.
archiveNamePrefix=«buildName(self)»

# The location underwhich all of the build output will be collected.
collectingFolder=${archivePrefix}

# The list of {os, ws, arch} configurations to build.  This 
# value is a '&' separated list of ',' separate triples.  For example, 
#     configs=win32,win32,x86 & linux,motif,x86
# By default the value is *,*,*
configs=«FOREACH configs->asSequence() AS config SEPARATOR ' & '-»«config.os»,«config.ws»,«config.arch»«ENDFOREACH»

# By default PDE creates one archive (result) per entry listed in the configs property.
# Setting this value to true will cause PDE to only create one output containing all 
# artifacts for all the platforms listed in the configs property.
# To control the output format for the group, add a "group, group, group - <format>" entry to the
# archivesFormat. 
#groupConfigurations=true

#The format of the archive. By default a zip is created using antZip.
#The list can only contain the configuration for which the desired format is different than zip.
# Not used, as only building builder config, leaving p2-generated product builds as final output
archivesFormat=«FOREACH configs->asSequence() AS config SEPARATOR ' & '-»«config.os»,«config.ws»,«config.arch»-«config.archiveFormat»«ENDFOREACH»
	
#Set to true if you want the output to be ready for an update jar (no site.xml generated)
outputUpdateJars=true

#Set to true for Jnlp generation
#codebase should be a URL that will be used as the root of all relative URLs in the output.
#generateJnlp=false
#jnlp.codebase=<codebase url>
#jnlp.j2se=<j2se version>
#jnlp.locale=<a locale>
#jnlp.generateOfflineAllowed=true or false generate <offlineAllowed/> attribute in the generated features
#jnlp.configs=${configs}			#uncomment to filter the content of the generated jnlp files based on the configuration being built

#Set to true if you want to sign jars
#signJars=false
#sign.alias=<alias>
#sign.keystore=<keystore location>
#sign.storepass=<keystore password>

#Arguments to send to the zip executable
zipargs=

#Arguments to send to the tar executable
tarargs=

#Control the creation of a file containing the version included in each configuration - on by default 
generateVersionsLists=true
«ENDDEFINE»

«DEFINE buildNamingProperties FOR build::Build»
############## BUILD NAMING CONTROL ################
# The directory into which the build elements are fetched and where
# the build takes place. Defaults to ${user.home}/build if not set in launch script.
buildRoot=${user.home}/build
buildDirectory=${buildRoot}/«product.launcher.name»

# Type of build.  Used in naming the build output.  Typically this value is
# one of I, N, M, S, ...
buildType=«type»

# Timestamp for the build.  Used in naming the build output - ${date} and ${time} expected to be initialized in build.xml
timestamp=${date}-${time}

# Label for the build.  Used in naming the build output
buildLabel=«buildLabel(self)»

# ID of the build.  Used in naming the build output.
buildId=«buildId(self)»

#The value to be used for the qualifier of a plugin or feature when you want to override the value computed by pde.
#The value will only be applied to plugin or features indicating build.properties, qualifier = context 
forceContextQualifier=v${timestamp}

#Enable / disable the generation of a suffix for the features that use .qualifier. 
#The generated suffix is computed according to the content of the feature   
generateFeatureVersionSuffix=true
individualSourceBundles=true
«ENDDEFINE»

«DEFINE baseProperties FOR build::Build»
############# BASE CONTROL #############
# Settings for the base Eclipse components and Java class libraries 
# against which you are building.
# Base location for anything the build needs to compile against.  For example,
# in most RCP app or a plug-in,  the baseLocation should be the location of a previously
# installed Eclipse against which the application or plug-in code will be compiled.
#skipBase=true
base=${buildDirectory}/base
baseLocation=${base}/eclipse
deltaPackLocation=${buildDirectory}/deltapack

eclipseBaseURL=«base.location»«base.file»
deltaPackURL=«base.location»«base.deltapack»

#Os/Ws/Arch/nl of the eclipse specified by baseLocation
baseos=«base.config.os»
basews=«base.config.ws»
basearch=«base.config.arch»

#pluginPath is a list of locations in which to find plugins and features.  This list is separated by the platform file separator (; or :)
#a location is one of:  
#- the location of the jar or folder that is the plugin or feature : /path/to/foo.jar or /path/to/foo
#- a directory that contains a /plugins or /features subdirectory
#- the location of a feature.xml, or for 2.1 style plugins, the plugin.xml or fragment.xml
pluginPath=${deltaPackLocation}/eclipse
«ENDDEFINE»

«DEFINE mapProperties FOR build::Build»
############# MAP FILE CONTROL ################
# This section defines CVS tags to use when fetching the map files from the repository.
# If you want to fetch the map file from repository / location, change the getMapFiles target in the customTargets.xml

#skipMaps=true
mapsRepo=«_map.repo»
mapsRoot=«_map.root»
mapsCheckoutTag=«_map._tag»

#tagMaps=true
mapsTagTag=v${buildId}
«ENDDEFINE»

«DEFINE repoProperties FOR build::Build»
############ REPOSITORY CONTROL ###############
# This section defines properties parameterizing the repositories where plugins, fragments
# bundles and features are being obtained from. 

# The tags to use when fetching elements to build.
# By default the builder will use whatever is in the maps.  
# This value takes the form of a comma separated list of repository identifier (like used in the map files) and the 
# overriding value
# For example fetchTag=CVS=HEAD, SVN=v20050101
fetchTag=«fetchTag»
#skipFetch=true
«ENDDEFINE»

«DEFINE compilerOptions FOR build::Build»
############# JAVA COMPILER OPTIONS ##############
# The location of the Java jars to compile against.  Typically the rt.jar for your JDK/JRE
#bootclasspath=${java.home}/lib/rt.jar;${java.home}/lib/jsse.jar;${java.home}/lib/charsets.jar;${java.home}/lib/deploy_g.jar;${java.home}/lib/deploy.jar;${java.home}/lib/javaws_g.jar;${java.home}/lib/javaws.jar;${java.home}/lib/jce.jar;${java.home}/lib/plugin_g.jar;${java.home}/lib/plugin.jar

# specific JRE locations to compile against. These values are used to compile bundles specifying a 
# Bundle-RequiredExecutionEnvironment. Uncomment and set values for environments that you support
#CDC-1.0/Foundation-1.0= /path/to/rt.jar
#CDC-1.1/Foundation-1.1=
#OSGi/Minimum-1.0=
#OSGi/Minimum-1.1=
#JRE-1.1=
#J2SE-1.2=
#J2SE-1.3=
#J2SE-1.4=
#J2SE-1.5=
#PersonalJava-1.1=
#PersonalJava-1.2=
#CDC-1.0/PersonalBasis-1.0=
#CDC-1.0/PersonalJava-1.0=
#CDC-1.1/PersonalBasis-1.1=
#CDC-1.1/PersonalJava-1.1=

# Specify the output format of the compiler log when eclipse jdt is used
logExtension=.log

# Whether or not to include debug info in the output jars
javacDebugInfo=«compiler.debugInfo»

# Whether or not to fail the build if there are compiler errors
javacFailOnError=«compiler.failOnError»

# Enable or disable verbose mode of the compiler
javacVerbose=«compiler.verbose»

# Extra arguments for the compiler. These are specific to the java compiler being used.
compilerArg=«compiler.args»

# Default value for the version of the source code. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacSource in build.properties
javacSource=«compiler.sourceVersion»

# Default value for the version of the byte code targeted. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacTarget in build.properties.
javacTarget=«compiler.targetVersion»

#to avoid recompilation if previously compiled
#noclean=true
«ENDDEFINE»

«DEFINE additions FOR build::Build»
«ENDDEFINE»
