«IMPORT 'http://www.eclipse.org/amalgam/2008/build'»
«IMPORT 'http://www.eclipse.org/amalgam/2008/product'»

«DEFINE Main FOR Build»
<project name="«label» build targets and properties" default="noDefault">
	<!-- ===================================================================== -->
	<!--                    NOTE: This a generated script                      -->
	<!-- ===================================================================== -->
«EXPAND properties FOR this»
«EXPAND imports FOR this»
«EXPAND allElementsTarget FOR this»
«EXPAND getBaseComponentsTarget FOR this»
«EXPAND installDeltaPackTarget FOR this»
«EXPAND getMapFilesTarget FOR this»
«EXPAND tagMapFilesTarget FOR this»
«EXPAND cleanTarget FOR this»
«EXPAND gatherLogsTarget FOR this»
«EXPAND emailFeatureTargets FOREACH contributions»
«EXPAND emailBundleTargets FOREACH contributions»
«EXPAND preSetupTarget FOR this»
«EXPAND postSetupTarget FOR this»
«EXPAND preFetchTarget FOR this»
«EXPAND postFetchTarget FOR this»
«EXPAND preGenerateTarget FOR this»
«EXPAND postGenerateTarget FOR this»
«EXPAND preProcessTarget FOR this»
«EXPAND postProcessTarget FOR this»
«EXPAND preAssembleTarget FOR this»
«EXPAND postAssembleTarget FOR this»
«EXPAND prePackageTarget FOR this»
«EXPAND postPackageTarget FOR this»
«EXPAND postBuildTarget FOR this»
«EXPAND installFeatureTarget FOR this»
«EXPAND installBundleTarget FOR this»
«EXPAND testTarget FOR this»
«EXPAND publishTarget FOR this»
«EXPAND noDefaultTarget FOR this»
«EXPAND sendmailTarget FOR this»
«EXPAND additions FOR this»
</project>
«ENDDEFINE»

«DEFINE properties FOR Build»
«IF sendmail == false»
	<property name="nomail" value="true"/>
«ENDIF»
	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>
«ENDDEFINE»

«DEFINE imports FOR Build»
<import file="${allElementsFile}" />
«ENDDEFINE»

«DEFINE allElementsTarget FOR Build»
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>
«ENDDEFINE»

«DEFINE getBaseComponentsTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" 
			 dest="${buildRoot}/«base.file»" verbose="true" usetimestamp="true"/>
		<mkdir dir="${base}"/>
		«IF base.file.endsWith("tar.gz") == true»
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildRoot}/«base.file»"/>
			<arg line="-C ${base}"/>
		</exec>
		«ELSE»
		<unzip src="${buildRoot}/«base.file»" dest="${base}"/>
		«ENDIF»
		
		<antcall target="install.delta.pack"/>

		«EXPAND processContributionsTarget FOREACH contributions»
	</target>
	
	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>
«ENDDEFINE»

«DEFINE processContributionsTarget FOR Contribution»
«IF features.size() > 0 || bundles.size() > 0-»
		<echo message="Installing contributions «FOREACH features AS feature SEPARATOR ", "-»«feature.id»«ENDFOREACH»."/>
		«EXPAND installFeature FOREACH features.select(f | f.repo.location != null)»
		«EXPAND installBundle FOREACH bundles.select(f | f.repo.location != null)»
«ENDIF-»
«ENDDEFINE»

«DEFINE installFeature FOR Feature»
		<antcall target="install.feature">
			<param name="feature.id" value="«id»"/>
			<param name="feature.version" value="«version»"/>
			<param name="repo" value="«repo.location»"/>
		</antcall>
«ENDDEFINE»
	
«DEFINE installBundle FOR Bundle»
		<antcall target="install.bundle">
			<param name="bundle.id" value="«id»"/>
			<param name="bundle.version" value="«version»"/>
			<param name="repo" value="«repo.location»"/>
		</antcall>
«ENDDEFINE»
	
«DEFINE emailFeatureTargets FOR Contribution»
«FOREACH features.select(f | f.repo.location != null) AS feature»
	<target name="email.«feature.id».result" if="install.failed">
		<antcall target="sendmail">
			<param name="recipients" value="«FOREACH contacts AS contact SEPARATOR ","-»«contact.email»«ENDFOREACH»" />
			<param name="id" value="«feature.id»"/>
			<param name="version" value="«feature.version»"/>
			<param name="repo.location" value="«feature.repo.location»"/>
		</antcall>
	</target>
«ENDFOREACH»
«ENDDEFINE»

«DEFINE emailBundleTargets FOR Contribution»
«FOREACH bundles.select(b | b.repo.location != null) AS bundle»
	<target name="email.«bundle.id».result" if="install.failed">
		<antcall target="sendmail">
			<param name="recipients" value="«FOREACH contacts AS contact SEPARATOR ","-»«contact.email»«ENDFOREACH»" />
			<param name="id" value="«bundle.id»"/>
			<param name="version" value="«bundle.version»"/>
			<param name="repo.location" value="«bundle.repo.location»"/>
		</antcall>
	</target>
«ENDFOREACH»
«ENDDEFINE»
	
«DEFINE installDeltaPackTarget FOR Build»
	<!-- Fetch and extract the delta pack to its pluginPath location -->
	<target name="install.delta.pack">		
		<available file="${buildRoot}/«base.deltapack»" property="skipDeltaPack" />
		<antcall target="get.delta.pack"/>
		<unzip src="${buildRoot}/«base.deltapack»" dest="${deltaPackLocation}"/>
	</target>
	
	<target name="get.delta.pack" unless="skipDeltaPack">
		<get src="${deltaPackURL}" 
		     dest="${buildRoot}/«base.deltapack»" verbose="true" usetimestamp="true" />
	</target>
«ENDDEFINE»
	
«DEFINE getMapFilesTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
		<copy todir="${buildDirectory}/maps" overwrite="true">
			<fileset dir="${buildDirectory}/maps/${mapsRoot}/maps">
				<include name="**/*.map"/>
			</fileset>
		</copy>
		<delete includeemptydirs="true">
		    <fileset dir="${buildDirectory}/maps" excludes="*.map"/>
		</delete>
		<delete includeemptydirs="true">
		    <fileset dir="${buildDirectory}/maps">
		    	<not>
		    		<filename name="*.map"/>
		    	</not>
		    </fileset>
		</delete>
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>
«ENDDEFINE»

«DEFINE tagMapFilesTarget FOR Build»
	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>
«ENDDEFINE»

«DEFINE cleanTarget FOR Build»
	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>
«ENDDEFINE»

«DEFINE gatherLogsTarget FOR Build»
	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>
«ENDDEFINE»

«DEFINE preSetupTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>
«ENDDEFINE»

«DEFINE postSetupTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>
«ENDDEFINE»

«DEFINE preFetchTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>
«ENDDEFINE»

«DEFINE postFetchTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${timestamp}" token="@buildId@">
			<include name="**/about.mappings" />
		</replace>
	</target>
«ENDDEFINE»

«DEFINE preGenerateTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>
«ENDDEFINE»

«DEFINE postGenerateTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>
«ENDDEFINE»

«DEFINE preProcessTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>
«ENDDEFINE»

«DEFINE postProcessTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>
«ENDDEFINE»

«DEFINE preAssembleTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>
«ENDDEFINE»

«DEFINE postAssembleTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>
«ENDDEFINE»

«DEFINE prePackageTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>
«ENDDEFINE»

«DEFINE postPackageTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>
«ENDDEFINE»

«DEFINE postBuildTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
	</target>
«ENDDEFINE»

«DEFINE installFeatureTarget FOR Build»
	<target name="install.feature"> 
		<!-- TODO: use if/when profileProperties is available to allow installation of features 
		<p2.director 
			installiu="${feature.id}.feature.group"
			version="${p2.version}"  
			artifactrepository="${repo}"
			metadatarepository="${repo}"
		/> -->
		<!-- FIXME: eclipse.p2.MD5Check=false is workaround for bug [253713] -->
		<exec executable="${baseLocation}/eclipse" failonerror="false" resultproperty="install.return.code">
«IF launchVM != null && launchVM != ''-»
			<arg line="-vm «launchVM»"/>
«ENDIF-»
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${feature.id}.feature.group" />
			<!-- NOTE: using no version parameter seems to install the latest (first? arbitrary?) version of the feature. 
					   note: having 0.0.0 as the version is not the same as no value, unfortunately -->
			<arg line="-version ${feature.version}" /> 
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<!-- Until someone splits the two, assume metadata and artifact repo are the same -->
			<arg line="-metadataRepository ${repo}" />
			<arg line="-artifactRepository ${repo}" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg line="-Declipse.p2.MD5Check=false"/>
		</exec>
		
		<condition property="install.failed">
			<not><equals arg1="${install.return.code}" arg2="0"/></not>
		</condition>
		
		<antcall target="email.${feature.id}.result"/>

	</target>
«ENDDEFINE»

«DEFINE installBundleTarget FOR Build»
	<target name="install.bundle"> 
		<!-- FIXME: eclipse.p2.MD5Check=false is workaround for bug [253713] -->
		<exec executable="${baseLocation}/eclipse" failonerror="false" resultproperty="install.return.code">
«IF launchVM != null && launchVM != ''»
			<arg line="-vm «launchVM»"/>
«ENDIF»
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${bundle.id}" />
			<arg line="-version ${bundle.version}" /> 
			<!-- Until someone splits the two, assume metadata and artifact repo are the same -->
			<arg line="-metadataRepository ${repo}" />
			<arg line="-artifactRepository ${repo}" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg line="-Declipse.p2.MD5Check=false"/>
		</exec>
		
		<condition property="install.failed">
			<not><equals arg1="${install.return.code}" arg2="0"/></not>
		</condition>
		
		<antcall target="email.${bundle.id}.result"/>

	</target>
«ENDDEFINE»

«DEFINE testTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>
«ENDDEFINE»

«DEFINE publishTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>
«ENDDEFINE»

«DEFINE noDefaultTarget FOR Build»
	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>
«ENDDEFINE»

«DEFINE sendmailTarget FOR Build»
	<target name="sendmail" unless="nomail">
		<copy file="${buildDirectory}/«product.launcher.name».build.log.txt" tofile="${buildRoot}/${buildId}.log.txt"/> 
		<mail tolist="«buildmaster.email»,${recipients}«IF defaultMailList.size() > 0»,«FOREACH defaultMailList AS contact SEPARATOR ","-»«contact.name»«ENDFOREACH»«ENDIF»"
              subject="«label» build failed"
              encoding="plain"
              failonerror="false">
            <from name="«label» buildmaster [«buildmaster.name»]"
                  address="«buildmaster.email»" />
                  <!-- TODO: add properties to model for accomodate log link and default email list, etc. -->
            <message>
            Contribution ${id} version ${version} failed to install from ${repo.location}.	
            
            Check the log file for more information: «builderURL»${buildId}.log.txt.
            </message>
        </mail>
        <fail message="Installation of ${id} [${version}] failed! Email sent to ${recipients}."/>
	</target>
«ENDDEFINE»

«DEFINE additions FOR Build»
«ENDDEFINE»