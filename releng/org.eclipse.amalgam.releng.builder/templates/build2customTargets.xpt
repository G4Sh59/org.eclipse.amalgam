«IMPORT 'http://www.eclipse.org/amalgam/2008/build'»
«IMPORT 'http://www.eclipse.org/amalgam/2008/product'»

«DEFINE Main FOR Build-»
<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!--                    NOTE: This a generated script                      -->
	<!-- ===================================================================== -->
	
	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" 
			 dest="${buildRoot}/eclipse-SDK-«base.version»-«base.config.os»«base.config.ws == base.config.os ? '' : '-' + base.config.ws»«builder.config.arch.literal == 'ppc' ? '-ppc' : ''».«base.extension»" verbose="true" usetimestamp="true"/>
		<mkdir dir="${base}"/>
		«IF base.extension == 'tar.gz'»
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildRoot}/eclipse-SDK-«base.version»-«base.config.os»«base.config.ws == base.config.os ? '' : '-' + base.config.ws»«builder.config.arch.literal == 'ppc' ? '-ppc' : ''».«base.extension»"/>
			<arg line="-C ${base}"/>
		</exec>
		«ELSE»
		<unzip src="${buildRoot}/eclipse-SDK-«base.version»-«base.config.os»«base.config.ws == base.config.os ? '' : '-' + base.config.ws».«base.extension»" dest="${base}"/>
		«ENDIF»
		
		<antcall target="install.delta.pack"/>
		
«FOREACH contributions.features.select(f | f.repo.location != null) AS feature-»
		<antcall target="install.feature">
			<param name="feature.id" value="«feature.id»"/>
			<param name="feature.version" value="«feature.version»"/>
			<param name="repo" value="«feature.repo.location»"/>
		</antcall>
«ENDFOREACH»
«FOREACH contributions.bundles.select(b | b.repo.location != null) AS bundle-»
		<antcall target="install.bundle">
			<param name="bundle.id" value="«bundle.id»"/>
			<param name="bundle.version" value="«bundle.version»"/>
			<param name="repo" value="«bundle.repo.location»"/>
		</antcall>
«ENDFOREACH»
	</target>
	
	<!-- Fetch and extract the delta pack to its pluginPath location -->
	<target name="install.delta.pack">		
		<available file="${buildRoot}/eclipse-«base.version»-delta-pack.zip" property="skipDeltaPack" />
		<antcall target="get.delta.pack"/>
		<unzip src="${buildRoot}/eclipse-«base.version»-delta-pack.zip" dest="${deltaPackLocation}"/>
	</target>
	
	<target name="get.delta.pack" unless="skipDeltaPack">
		<get src="${deltaPackURL}" 
		     dest="${buildRoot}/eclipse-«base.version»-delta-pack.zip" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
		<copy todir="${buildDirectory}/maps" overwrite="true">
			<fileset dir="${buildDirectory}/maps/${mapsRoot}/maps">
				<include name="**/*.map"/>
			</fileset>
		</copy>
		<delete includeemptydirs="true">
		    <fileset dir="${buildDirectory}/maps" excludes="*.map"/>
		</delete>
		<delete includeemptydirs="true">
		    <fileset dir="${buildDirectory}/maps">
		    	<not>
		    		<filename name="*.map"/>
		    	</not>
		    </fileset>
		</delete>
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${timestamp}" token="@buildId@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
	</target>
	
	<target name="install.feature"> 
		<!-- TODO: use if/when profileProperties is available to allow installation of features 
		<p2.director 
			installiu="${feature.id}.feature.group"
			version="${p2.version}"  
			artifactrepository="${repo}"
			metadatarepository="${repo}"
		/> -->
		<echo message="Installing feature ${feature.id} ${feature.version}"/>
		<!-- FIXME: eclipse.p2.MD5Check=false is workaround for bug [253713] -->
		<exec executable="${baseLocation}/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${feature.id}.feature.group" />
			<!-- NOTE: using no version parameter seems to install the latest (first? arbitrary?) version of the feature. 
					   note: having 0.0.0 as the version is not the same as no value, unfortunately -->
			<arg line="-version ${feature.version}" /> 
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<!-- Until someone splits the two, assume metadata and artifact repo are the same -->
			<arg line="-metadataRepository ${repo}" />
			<arg line="-artifactRepository ${repo}" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg line="-Declipse.p2.MD5Check=false"/>
		</exec>
		
		<!-- delete the metadata cache -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${baseLocation}/p2/org.eclipse.equinox.p2.core/cache"/>
	</target>
	
	<target name="install.bundle"> 
		<echo message="Installing bundle ${bundle.id} ${bundle.version}"/>
		<!-- FIXME: eclipse.p2.MD5Check=false is workaround for bug [253713] -->
		<exec executable="${baseLocation}/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${bundle.id}" />
			<arg line="-version ${bundle.version}" /> 
			<!-- Until someone splits the two, assume metadata and artifact repo are the same -->
			<arg line="-metadataRepository ${repo}" />
			<arg line="-artifactRepository ${repo}" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg line="-Declipse.p2.MD5Check=false"/>
		</exec>
		
		<!-- delete the metadata cache -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${baseLocation}/p2/org.eclipse.equinox.p2.core/cache"/>
	</target>
		
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
«ENDDEFINE»