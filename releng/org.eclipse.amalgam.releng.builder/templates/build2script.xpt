«IMPORT 'http://www.eclipse.org/amalgam/2008/build'»
«IMPORT 'http://www.eclipse.org/amalgam/2008/product'»

«DEFINE Main FOR Build-»
<?xml version="1.0"?>
<project default="main" basedir=".">
	<!-- ===================================================================== -->
	<!--                    NOTE: This a generated script                      -->
	<!-- ===================================================================== -->
	
	<target name="init">
		<property name="date" value="«date»"/>
		<property name="time" value="«time»"/>
		<property name="buildRoot" value="«buildRoot»"/>
		<property name="basebuilder" value="${buildRoot}/«product.launcher.name»/basebuilder"/>
	</target>
	
	<target name="main" depends="init">
		<antcall target="fetch.builder"/>
		<antcall target="build.product">
			<param name="target" value="«product.launcher.name»"/>
			<param name="buildDirectory" value="${buildRoot}/«product.launcher.name»"/>
		</antcall>
		<!-- FIXME: generate metadata using site.xml to provide categories until bug 250974 is resolved -->
		<antcall target="categorize">
			<param name="target" value="«product.launcher.name»"/>
			<param name="buildDirectory" value="${buildRoot}/«product.launcher.name»"/>
		</antcall>
	</target>
	
	<target name="fetch.builder"> 
		<!-- No director app in normal basebuilder, so just use SDK -->
		<get src="http://download.eclipse.org/eclipse/downloads/drops/«builder.buildID»/eclipse-SDK-«builder.version»-«builder.config.os»«builder.config.ws == builder.config.os ? '' : '-' + builder.config.ws»«builder.config.arch.literal == 'ppc' ? '-ppc' : ''».«builder.extension»" 
		     dest="${buildRoot}/eclipse-SDK-«builder.version»-«builder.config.os»«builder.config.ws == builder.config.os ? '' : '-' + builder.config.ws»«builder.config.arch.literal == 'ppc' ? '-ppc' : ''».«builder.extension»" verbose="true" usetimestamp="true"/>
		<mkdir dir="${basebuilder}"/>
		«IF builder.extension == 'tar.gz'»
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildRoot}/eclipse-SDK-«builder.version»-«builder.config.os»«builder.config.ws == builder.config.os ? '' : '-' + builder.config.ws»«builder.config.arch.literal == 'ppc' ? '-ppc' : ''».«builder.extension»"/>
			<arg line="-C ${basebuilder}"/>
		</exec>
		«ELSE»
		<unzip src="${buildRoot}/eclipse-SDK-«builder.version»-«builder.config.os»«builder.config.ws == builder.config.os ? '' : '-' + builder.config.ws».«builder.extension»" dest="${basebuilder}"/>
		«ENDIF»
	</target>
	
	<target name="build.product">
		<property file="${buildRoot}/${target}/builder/build.properties"/>
		<fail message="Could not load builder properties.  Did you generate them and customTargets.xml to ${buildRoot}/${target}/builder?" unless="product" />
		<fileset dir="${basebuilder}/eclipse/plugins" includes="org.eclipse.pde.build_*/scripts/productBuild/productBuild.xml" id="pde.plugin.path" />
		<pathconvert property="buildFile" refid="pde.plugin.path" />
		<fail message="Could not find pde builder here: ${buildFile}" unless="buildFile" />
		
		<echo message="Configuring product «product.id» «product.version» with the following features:"/>
«FOREACH product.features.feature AS feature-»
		<echo message="   «feature.id» «feature.version»"/>
«ENDFOREACH»
		
		<!-- First, run normal product build to fetch, compile, and generate metadata repository for p2 build -->
		<exec executable="${basebuilder}/eclipse/eclipse" dir="${buildDirectory}/builder" failonerror="false">
«IF launchVM != null && launchVM != ''-»
			<arg line="-vm «launchVM»"/>
«ENDIF-»
			<arg line="-application org.eclipse.ant.core.antRunner"/>
			<arg line="-buildfile ${buildFile}" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg value="-DbuildRoot=${buildRoot}"/>
			<arg value="-Dbuilder=${buildDirectory}/builder"/>
			<arg value="-Dbasebuilder=${basebuilder}"/>
			<arg value="-DbuildDirectory=${buildDirectory}"/>
			<arg value="-Dbase=${base}"/>
			<arg value="-DbaseLocation=${baseLocation}"/>
			<arg value="-Dtimestamp=${timestamp}"/>
			<arg value="-DbuildType=${buildType}"/>
			<arg value="-DbuildId=${buildId}"/>
			<arg value="-DbuildLabel=${buildLabel}"/>
		</exec>
		
		<!-- We don't really need the zips produced by the product build, so delete -->
		<delete >
		    <fileset dir="${buildDirectory}/${buildLabel}" includes="**/*.zip"/>
		</delete>
		
		<!-- NOTE: when PDE build supports the configs property for product builds, this section can be simplified -->
		«FOREACH configs AS config»
		<!-- Invoke p2 director to assemble the «config.os».«config.ws».«config.arch» product -->
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/«config.os».«config.ws».«config.arch»/${archivePrefix}" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/«config.os».«config.ws».«config.arch»/${archivePrefix}"/>
			<param name="p2.os" value="«config.os»"/>
			<param name="p2.ws" value="«config.ws»"/>
			<param name="p2.arch" value="«config.arch»"/>
			<param name="p2.version" value="«product.version»"/>
		</antcall>
		
		«IF config.os.literal == "macosx"»
		<!-- FIXME: workaround for leftover Eclipse.app TODO: find/submit bug -->
		<delete dir="${buildDirectory}/${buildLabel}/p2/tmp/«config.os».«config.ws».«config.arch»/${archivePrefix}/Eclipse.app" />
		«ENDIF»
		
		«IF config.os.literal == "win32"»
		<zip destfile="${buildDirectory}/${buildLabel}/${buildId}.«config.os».«config.ws».«config.arch».zip" basedir="${buildDirectory}/${buildLabel}/p2/tmp/«config.os».«config.ws».«config.arch»/${archivePrefix}" />
		«ELSE»
		<exec executable="tar" dir="${buildDirectory}/${buildLabel}/p2/tmp/«config.os».«config.ws».«config.arch»/">
			<arg line="${tarargs}-cf ${buildDirectory}/${buildLabel}/p2/${buildId}.«config.os».«config.ws».«config.arch».tar ${archivePrefix}"/>
		</exec>
		<gzip src="${buildDirectory}/${buildLabel}/p2/${buildId}.«config.os».«config.ws».«config.arch».tar" zipfile="${buildDirectory}/${buildLabel}/${buildId}.«config.os».«config.ws».«config.arch».tar.gz"/>
		<delete file="${buildDirectory}/${buildLabel}/p2/${buildId}.«config.os».«config.ws».«config.arch».tar" />
		«ENDIF»
		«ENDFOREACH»
		
		<delete dir="${buildDirectory}/${buildLabel}/p2"/>
		
		<!-- Consolidate artifacts for publish -->
		<move file="${buildRoot}/«product.launcher.name».build.log.txt" todir="${buildDirectory}/${buildLabel}" failonerror="false"/>
		<move file="${buildDirectory}/index.php" todir="${buildDirectory}/${buildLabel}"/>
		<move file="${buildDirectory}/directory.txt" todir="${buildDirectory}/${buildLabel}"/>
		<move file="${buildDirectory}/«product.launcher.name».build" todir="${buildDirectory}/${buildLabel}"/>
		<move file="${buildDirectory}/«product.launcher.name».product" todir="${buildDirectory}/${buildLabel}"/>
	</target>
	
	<target name="run.director"> <!-- Note, there is a p2.director Ant task, but apparently not complete -->
	<!-- FIXME: eclipse.p2.MD5Check=false is workaround for bug [253713] -->
		<exec executable="${basebuilder}/eclipse/eclipse" failonerror="false">
«IF launchVM != null && launchVM != ''-»
			<arg line="-vm «launchVM»"/>
«ENDIF-»
			<arg line="-application org.eclipse.equinox.p2.director.app.application"/>
			<arg line="-nosplash"/>
			<arg line="--launcher.suppressErrors"/>
			<arg line="-consoleLog"/>
			<arg line="-p2.flavor ${p2.flavor}"/>
			<arg line="-installIU ${p2.IU}"/>
			<arg line="-version ${p2.version}"/>
			<arg line="-p2.os ${p2.os}"/>
			<arg line="-p2.ws ${p2.ws}"/>
			<arg line="-p2.arch ${p2.arch}"/>
			<arg line="-roaming"/>
			<arg line="-profile ${p2.profile}"/>
			<arg line="-profileProperties org.eclipse.update.install.features=true"/>
			<arg line="-metadataRepository ${p2.metadata.repo}"/>
			<arg line="-artifactRepository ${p2.artifact.repo}"/>
			<arg line="-destination ${p2.director.install.path}"/>
			<arg line="-bundlepool ${p2.director.install.path}"/>
			<arg line="-vmargs"/>
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2"/>
			<arg line="-Declipse.p2.MD5Check=false"/>
			<arg line="-Xmx1024m"/>
		</exec>
		
		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${p2.director.install.path}/p2/org.eclipse.equinox.p2.core/cache"/>
	</target>
	
	<!-- FIXME: workaround for bug 250974 : generate metadata using site.xml for categorization -->
	<target name="categorize" depends="init">
		<property file="${buildRoot}/${target}/builder/build.properties"/>
		<exec executable="${basebuilder}/eclipse/eclipse" failonerror="false">
«IF launchVM != null && launchVM != ''-»
			<arg line="-vm «launchVM»"/>
«ENDIF-»
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator"/>
			<arg line="-updateSite ${buildDirectory}/${buildLabel}/repo"/>
			<arg line="-site ${p2.metadata.repo}/site.xml"/>
			<arg line="-metadataRepository ${p2.metadata.repo}"/>
			<arg line="-artifactRepository ${p2.artifact.repo}"/>
			<arg line="-nosplash"/>
			<arg line="--launcher.suppressErrors"/>
			<arg line="-consoleLog"/>
			<arg line="-reusePack200Files"/>
			<arg line="-noDefaultIUs"/>
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m"/>
		</exec>
		<!-- Zip the metadata, as -compress argument above didn't seem to do the trick -->
		<zip destfile="${buildDirectory}/${buildLabel}/repo/content.jar"
       		 basedir="${buildDirectory}/${buildLabel}/repo"
       		 includes="content.xml"/>
       	<zip destfile="${buildDirectory}/${buildLabel}/repo/artifacts.jar"
       		 basedir="${buildDirectory}/${buildLabel}/repo"
       		 includes="artifacts.xml"/>
        <delete file="${buildDirectory}/${buildLabel}/repo/content.xml" failonerror="false"/>
       	<delete file="${buildDirectory}/${buildLabel}/repo/artifacts.xml" failonerror="false"/>
	</target>
	
</project>
«ENDDEFINE»