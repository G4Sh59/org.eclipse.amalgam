modeltype build uses "http://www.eclipse.org/amalgam/2008/build";
modeltype product uses "http://www.eclipse.org/amalgam/2008/product";

transformation processbuild(in inProduct : product, in inBuild : build, out outProduct : product, out outBuild : build);

configuration property date : String;
configuration property time : String;

main() {
	inBuild.rootObjects()[Build].map toBuild();
	inProduct.rootObjects()[Product].map toProduct();
--	outProduct.rootObjects()[Product].features.map toFeatures();
}

mapping product::Product::toProduct() : product::Product@outProduct {
	init {
		result := self.deepclone().oclAsType(Product);
		var v : String := self.version;
		if (v.endsWith('qualifier')) then {
			v := self.version.substringBefore('qualifier') + 'v' + this.date + this.time;
		} endif;
	}
	version := v;
	features := object product::Features {
		feature += outBuild.rootObjects()![Build].contributions.features->select(f | f.inProduct)->map toFeature();
	}
	end {
		outBuild.rootObjects()[Build].map updateProductReference();
	}
}

mapping build::Build::toBuild() : build::Build@outBuild {
	init {
		result := self.deepclone().oclAsType(Build);
	}
	date := this.date;
	time := this.time;
}

mapping inout build::Build::updateProductReference() {
	product := outProduct.rootObjects()![Product];
}

mapping inout product::Features::toFeatures() {
	feature += outBuild.rootObjects()[Build].contributions.features->select(f | f.inProduct)->map toFeature();
}

mapping build::Feature::toFeature() : product::Feature {
	id := self.id;
	version := self.version;
}
