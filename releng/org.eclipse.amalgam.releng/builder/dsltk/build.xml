<?xml version="1.0"?>
<project default="main" basedir=".">
	<tstamp/>
	<property name="date" value="${DSTAMP}"/>
	<property name="time" value="${TSTAMP}"/> 
	<!-- TODO: find a better way obtain from product definition and pass to build below -->
	<property name="productVersion" value="1.0.0.v${date}${time}"/>
	<property file="build.properties"/>

	<target name="main">
		<antcall target="fetch.builder"/>
		<antcall target="build.product"/>
		<antcall target="build.p2.product"/>
	</target>
	
	<target name="fetch.builder"> 
		<!-- No director app in normal basebuilder, so just use SDK and extract deltapack into it -->
		<!-- can all dependencies just be installed into basebuilder and forget base location (target)? -->
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/base.tar.gz" verbose="true" usetimestamp="true"/>
		<mkdir dir="${buildDirectory}/basebuilder"/>
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildDirectory}/base.tar.gz"/>
			<arg line="-C ${buildDirectory}/basebuilder"/>
		</exec>
		<antcall target="install.delta.pack"/>
	</target>
	
	<target name="install.delta.pack">
		<available file="${buildDirectory}/deltapack.zip" property="skipDeltaPack" />
		<antcall target="get.delta.pack"/>
		<unzip src="${buildDirectory}/deltapack.zip" dest="${buildDirectory}/basebuilder"/>
	</target>
	
	<target name="get.delta.pack" unless="skipDeltaPack">
		<get src="${deltaPackURL}" dest="${buildDirectory}/deltapack.zip" verbose="true" usetimestamp="true" />
	</target>

	<target name="build.product">		
		<exec executable="${buildDirectory}/basebuilder/eclipse/eclipse" dir="${buildDirectory}/builder" failonerror="true">
			<arg line="-application org.eclipse.ant.core.antRunner"/>
			<arg line="-buildfile ${basebuilder}/eclipse/plugins/org.eclipse.pde.build_${pde.build.version}/scripts/productBuild/productBuild.xml" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-vmargs"/>
			<arg line="-Xmx1024m" />
			<arg value="-Dbuilder=${buildDirectory}/builder"/>
			<arg value="-DbuildDirectory=${buildDirectory}"/>
			<arg value="-Dbase=${base}"/>
			<arg value="-DbaseLocation=${baseLocation}"/>
			<arg value="-Dtimestamp=${timestamp}"/>
			<arg value="-DbuildType=${buildType}"/>
			<arg value="-DbuildId=${buildId}"/>
			<arg value="-DbuildLabel=${buildLabel}"/>
		</exec>
	</target>
		
	<target name="build.p2.product">
		<!-- Invoke p2 product installation here - no need to do within customTargets, actually -->
		<!-- note that there's a p2.director ant task, though not complete? -->
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse"/>
			<param name="p2.os" value="win32"/>
			<param name="p2.ws" value="win32"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
			
		<zip destfile="${buildDirectory}/${buildLabel}/p2/dsltk.win32.win32.x86.zip" basedir="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse"/>
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/eclipse"/>
			<param name="p2.os" value="linux"/>
			<param name="p2.ws" value="gtk"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
		
		<exec executable="tar" dir="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/">
			<arg line="${tarargs}-cvf ${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar ${archivePrefix}"/>
		</exec>
		<gzip src="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar" zipfile="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar.gz"/>
		<delete file="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar" />
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse"/>
			<param name="p2.os" value="macosx"/>
			<param name="p2.ws" value="carbon"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
		
		<!-- FIXME: replace dsltoolkit.ini with Eclipse.app/../Eclipse.ini and then concat with another
		           that has the missing vmargs - workaround -->
		<copy file="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/Eclipse.app/Contents/MacOS/eclipse.ini" 
			  tofile="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/dsltoolkit.app/Contents/MacOS/dsltoolkit.ini" overwrite="true"/>
		<concat append="true" destfile="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/dsltoolkit.app/Contents/MacOS/dsltoolkit.ini">-Xdock:icon=../Resources/Eclipse.icns
-Xms128m
-Xmx1024m
-XX:MaxPermSize=256m
		</concat> 

		<!-- FIXME: workaround for leftover Eclipse.app when launcher is different from default -->
		<delete dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/Eclipse.app" /> 
		
		<exec executable="tar" dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/">
			<arg line="${tarargs}-cvf ${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar ${archivePrefix}"/>
		</exec>
		<gzip src="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar" zipfile="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar.gz"/>
		<delete file="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar" />
		<delete dir="${buildDirectory}/${buildLabel}/p2/tmp"/>
	</target>
	
	<target name="run.director"> <!-- Note, there is a p2.director Ant task, but apparently not complete -->
		<exec executable="${buildDirectory}/basebuilder/eclipse/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${p2.IU}" />
			<arg line="-version ${p2.version}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile ${p2.profile}" />
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="-metadataRepository ${p2.metadata.repo}" />
			<arg line="-artifactRepository ${p2.artifact.repo}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-vmargs -Xmx1024m" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
		</exec>
		
		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${p2.director.install.path}/p2/org.eclipse.equinox.p2.core/cache" />
	</target>
	
</project>