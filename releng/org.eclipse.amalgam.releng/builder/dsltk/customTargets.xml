<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<!-- TODO replace zip usage with director install from update site after 241596 resolved -->
		<!-- with that, just download the director app, as it's not included in the basebuilder -->
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/base.tar.gz" verbose="true" usetimestamp="true"/>
		<mkdir dir="${base}"/>
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildDirectory}/base.tar.gz"/>
			<arg line="-C ${base}"/>
		</exec>
		
		<available file="${buildDirectory}/director/eclipse" property="skipDirector" />
		<antcall target="extractDirector"/>

		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.emf.sdk"/>
			<param name="metadata.repo" value="${emf.metadata.url}"/>
			<param name="artifact.repo" value="${emf.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.uml2.sdk"/>
			<param name="metadata.repo" value="${uml.metadata.url}"/>
			<param name="artifact.repo" value="${uml.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.emf.emfqtv.all.sdk"/>
			<param name="metadata.repo" value="${qtv.metadata.url}"/>
			<param name="artifact.repo" value="${qtv.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.gef.sdk"/>
			<param name="metadata.repo" value="${gef.metadata.url}"/>
			<param name="artifact.repo" value="${gef.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.ocl.all.sdk"/>
			<param name="metadata.repo" value="${ocl.metadata.url}"/>
			<param name="artifact.repo" value="${ocl.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.m2m.qvt.oml.sdk"/>
			<param name="metadata.repo" value="${qvt.metadata.url}"/>
			<param name="artifact.repo" value="${qvt.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.gmf.sdk"/>
			<param name="metadata.repo" value="${gmf.metadata.url}"/>
			<param name="artifact.repo" value="${gmf.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.uml2tools.sdk"/>
			<param name="metadata.repo" value="${umlt.metadata.url}"/>
			<param name="artifact.repo" value="${umlt.artifact.url}"/>
		</antcall>
		<antcall target="install.feature">
			<param name="feature.id" value="org.eclipse.emf.teneo.sdk"/>
			<param name="metadata.repo" value="${teneo.metadata.url}"/>
			<param name="artifact.repo" value="${teneo.artifact.url}"/>
		</antcall>
		
		<!-- workaround for out of date xpand and mwe update sites -->
		<antcall target="installXpandWorkflow"/>
		
		<p2.generator source="${baseLocation}" 
			append="true" 
			mode="final" 
			metadataRepository="file:${baseLocation}" 
			artifactRepository="file:${baseLocation}" 
			publishArtifacts="false"/>
		
		<antcall target="installDeltaPack"/>
	</target>
	
	<!-- Extract a second base to serve as director until small download available -->
	<target name="extractDirector" unless="skipDirector">
		<mkdir dir="${buildDirectory}/director"/>
		<exec executable="tar">
			<arg line="-xzf"/>
			<arg line="${buildDirectory}/base.tar.gz"/>
			<arg line="-C ${buildDirectory}/director"/>
		</exec>
	</target>
	
	<target name="installDeltaPack">
		<available file="${buildDirectory}/deltapack.zip" property="skipDeltaPack" />
		<antcall target="getDeltaPack"/>
		<unzip src="${buildDirectory}/deltapack.zip" dest="${base}"/>
	</target>
	
	<target name="getDeltaPack" unless="skipDeltaPack">
		<get src="${deltaPackURL}" dest="${buildDirectory}/deltapack.zip" verbose="true" usetimestamp="true" />
	</target>
	
	<target name="installXpandWorkflow">
		<available file="${buildDirectory}/temphack" property="temphackExists" />
		<antcall target="get.xpand.mwe"/>
		<copy todir="${base}/eclipse/plugins">
		    <fileset dir="${buildDirectory}/temphack" includes="**/*.jar"/>
		</copy>
		<unzip src="${buildDirectory}/temphack/emft-mwe-SDK-incubation-I200801100355.zip" dest="${base}"/>
		<unzip src="${buildDirectory}/temphack/m2t-xpand-SDK-I200801101356.zip" dest="${base}"/>
	</target>
	
	<target name="get.xpand.mwe" unless="temphackExists">
		<mkdir dir="${buildDirectory}/temphack"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/emft-mwe-SDK-incubation-I200801100355.zip" dest="${buildDirectory}/temphack/emft-mwe-SDK-incubation-I200801100355.zip" usetimestamp="true"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/m2t-xpand-SDK-I200801101356.zip" dest="${buildDirectory}/temphack/m2t-xpand-SDK-I200801101356.zip" usetimestamp="true"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/org.antlr.runtime_3.0.0.200801082321.jar" dest="${buildDirectory}/temphack/org.antlr.runtime_3.0.0.200801082321.jar" usetimestamp="true"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/org.apache.commons.cli_1.0.0.v200711021015.jar" dest="${buildDirectory}/temphack/org.apache.commons.cli_1.0.0.v200711021015.jar" usetimestamp="true"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/org.apache.commons.lang_2.1.0.v200711021015.jar" dest="${buildDirectory}/temphack/org.apache.commons.lang_2.1.0.v200711021015.jar" usetimestamp="true"/>
		<get src="http://download1.eclipse.org/modeling/amalgam/temp/org.apache.commons.logging_1.0.4.v200711021015.jar" dest="${buildDirectory}/temphack/org.apache.commons.logging_1.0.4.v200711021015.jar" usetimestamp="true"/>
	</target>
	
	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
		<copy todir="${buildDirectory}/maps" overwrite="true">
			<fileset dir="${buildDirectory}/maps/org.eclipse.amalgam/releng/org.eclipse.amalgam.releng/maps">
				<include name="**/*.map"/>
			</fileset>
		</copy>
		<delete dir="${buildDirectory}/maps/org.eclipse.amalgam" />
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<tstamp/>
		<property name="productVersion" value="1.0.0.v${timestamp}"/>
		<copy file="${builder}/dsltk.product" tofile="${buildDirectory}/dsltk.product" overwrite="true"/>
		<replace file="${buildDirectory}/dsltk.product" token="1.0.0.qualifier" value="${productVersion}" />
		<delete file="${buildDirectory}/product.version" failonerror="false"/>
		<concat destfile="${buildDirectory}/product.version">productVersion=${productVersion}</concat>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${timestamp}" token="@buildId@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<property file="${buildDirectory}/product.version"/>
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse"/>
			<param name="p2.os" value="win32"/>
			<param name="p2.ws" value="win32"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
		<zip destfile="${buildDirectory}/${buildLabel}/p2/dsltk.win32.win32.x86.zip" basedir="${buildDirectory}/${buildLabel}/p2/tmp/win32.win32.x86/eclipse"/>
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/eclipse"/>
			<param name="p2.os" value="linux"/>
			<param name="p2.ws" value="gtk"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
		<exec executable="tar" dir="${buildDirectory}/${buildLabel}/p2/tmp/linux.gtk.x86/">
			<arg line="${tarargs}-cvf ${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar ${archivePrefix}"/>
		</exec>
		<gzip src="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar" zipfile="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar.gz"/>
		<delete file="${buildDirectory}/${buildLabel}/p2/dsltk.linux.gtk.x86.tar" />
		<mkdir dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse"/>
			<param name="p2.os" value="macosx"/>
			<param name="p2.ws" value="carbon"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.version" value="${productVersion}"/>
		</antcall>
		
		<!-- FIXME: replace dsltoolkit.ini with Eclipse.app/../Eclipse.ini and then concat with another
		           that has the missing vmargs - workaround -->
		<copy file="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/Eclipse.app/Contents/MacOS/eclipse.ini" 
			  tofile="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/dsltoolkit.app/Contents/MacOS/dsltoolkit.ini" overwrite="true"/>
		<concat append="true" destfile="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/dsltoolkit.app/Contents/MacOS/dsltoolkit.ini">-Xdock:icon=../Resources/Eclipse.icns
-Xms128m
-Xmx1024m
-XX:MaxPermSize=256m
		</concat>
		<!-- FIXME: workaround for missing doc icon -->
		<copy file="${buildDirectory}/plugins/org.eclipse.amalgam.dsltk/Eclipse.icns" tofile="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/dsltoolkit.app/Contents/Resources/Eclipse.icns" overwrite="true"/>
				
		<!-- FIXME: workaround for leftover Eclipse.app when launcher is different from default -->
		<delete dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/Eclipse.app" />
		
		<available property="skipBundleInfo" file="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info" />
		<antcall target="fix237662"/>
		
		<exec executable="tar" dir="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/">
			<arg line="${tarargs}-cvf ${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar ${archivePrefix}"/>
		</exec>
		<gzip src="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar" zipfile="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar.gz"/>
		<delete file="${buildDirectory}/${buildLabel}/p2/dsltk.macosx.carbon.x86.tar" />
		<delete dir="${buildDirectory}/${buildLabel}/p2/tmp"/>
		
	</target>
	
	<target name="fix237662" unless="skipBundleInfo">
		<!-- FIXME: workaround for bug 237662 (org.eclipse.core.runtime start level wrong in bundles.info) -->
		<replace file="${buildDirectory}/${buildLabel}/p2/tmp/macosx.carbon.x86/eclipse/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info" 
			token="file:plugins/org.eclipse.core.runtime_3.4.0.v20080512.jar,4,false" 
			value="file:plugins/org.eclipse.core.runtime_3.4.0.v20080512.jar,4,true"/>
	</target>
			
	<target name="run.director"> <!-- Note, there is a p2.director Ant task -->
		<exec executable="${buildDirectory}/director/eclipse/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${p2.IU}" />
			<arg line="-version ${p2.version}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile ${p2.profile}" />
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="${p2.director.extraArgs}" />
			<arg line="-metadataRepository ${p2.metadata.repo},${platform.metadata.url}" />
			<arg line="-artifactRepository ${p2.artifact.repo},${platform.artifact.url}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-vmargs -Xmx1024m" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
		</exec>
		
		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${p2.director.install.path}/p2/org.eclipse.equinox.p2.core/cache" />
	</target>
	
	<target name="install.feature">
		<exec executable="${baseLocation}/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${feature.id}.feature.group" />
			<!-- NOTE: using no version parameter seems to install the latest (first? arbitrary?) version of the feature 
			<arg line="-version ${p2.version}" /> -->
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="-metadataRepository ${metadata.repo}" />
			<arg line="-artifactRepository ${artifact.repo}" />
			<arg line="-vmargs -Xmx1024m" />
		</exec>
		<delete failonerror="false" includeEmptyDirs="true" dir="${buildDirectory}/base/eclipse/p2/org.eclipse.equinox.p2.core/cache" />
	</target>
	
	<target name="install.versioned.feature">
		<exec executable="${baseLocation}/eclipse" failonerror="false">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-installIU ${feature.id}.feature.group" />
			<arg line="-version ${feature.version}" /> 
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="-metadataRepository ${metadata.repo}" />
			<arg line="-artifactRepository ${artifact.repo}" />
			<arg line="-vmargs -Xmx1024m" />
		</exec>
		<delete failonerror="false" includeEmptyDirs="true" dir="${buildDirectory}/base/eclipse/p2/org.eclipse.equinox.p2.core/cache" />
	</target>
		
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
